<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GITHUB 被墙解决</title>
      <link href="2021/04/15/GITHUB%E4%BD%BF%E7%94%A8%E5%8D%9A%E5%AE%A2%E8%A2%AB%E5%A2%99%E8%A7%A3%E5%86%B3/"/>
      <url>2021/04/15/GITHUB%E4%BD%BF%E7%94%A8%E5%8D%9A%E5%AE%A2%E8%A2%AB%E5%A2%99%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="新电脑！"><a href="#新电脑！" class="headerlink" title="新电脑！"></a>新电脑！</h1><p>换了新电脑，装博客。 发现GitHub页面都不太能进去。就开了梯子，开了全局代理都没办法clone。</p><p>报错： fatal: unable to access ‘<a href="https://github.com/xxx.git/&#39;" target="_blank" rel="noopener">https://github.com/xxx.git/&#39;</a>: Failed to connect to github.com port 443: Timed out </p><p>在网上搜了解决方案~</p><p>配置 git 的代理 (这里，梯子要始终开着使用, 以Lantern为例)<br>git config –global http.proxy “127.0.0.1:51564”<br>git config –global https.proxy “127.0.0.1:51564”<br> https 方式  clone git clone <a href="https://github.com/xxx.git" target="_blank" rel="noopener">https://github.com/xxx.git</a><br> (注意：这里必须使用 https 方式， ssh 方式即使配置了 git 的代理也不好使。)。后续后来</p><p> 如果GitHub又能访问了…开梯子会出现了如下错误：<br>  fatal: unable to access ‘<a href="https://github.com/FengGuanxi/HDU-Experience.git/&#39;" target="_blank" rel="noopener">https://github.com/FengGuanxi/HDU-Experience.git/&#39;</a>: Failed to connect to 127.0.0.1 port 1080: Connection refused </p><p>  那就需要取消代理<br>  命令是：<br>  git config –global –unset http.proxy<br>  git config –global –unset https.proxy</p><p>先配置</p><p>  git config –global user.email “<a href="mailto:you@example.com">you@example.com</a>“<br>  git config –global user.name “Your Name”</p><p>再 git （add . / commit -m “xxx”/ push）一套操作就行啦！ </p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021春</title>
      <link href="2021/01/25/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/25/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="往年回顾"><a href="#往年回顾" class="headerlink" title="往年回顾"></a>往年回顾</h1><p>出差了一年。又换了公司！<br>新买了电脑， 新买了手机。<br>人生真的是无数的可能性的组合，即使偶然又是必然。</p><p>刚入职没找到工作重心呐</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平凡之路</title>
      <link href="2020/10/15/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF/"/>
      <url>2020/10/15/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>劳动使人忘忧 —西塞罗<br>或许是灵魂游荡的的太久了，而又离的不远，终归是回了神。这些细细碎碎的时光，却又消失了大半年。<br>人们常说年轻的时候要保持认真和真诚。<br>kill the boy, let the man born, 保持童心真的是一件不太容易的事情， 赤子之心也很难， 感觉自己都变得有些油滑了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目经理</title>
      <link href="2020/06/15/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E7%90%86/"/>
      <url>2020/06/15/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>先前有担任过项目经理，业务需求比较明确,倾向于兼技术经理，偏业务需求挖掘算是第一次做。可能也没有纯粹的项目经理，业务和技术应该都是需要具备的其中几项辅助技能。</p><p>讲到技术岗，我觉得技术有个特性是只有行业顶尖的人负责造轮子，各行业上大多的技术岗真的蛮心酸。一个技术宅同事常吐槽说，很多时候并不是技术能力比不上主流，而是你处在的行业需求跟不上主流，许多传统行业信息化公司天花板略微一跳就触顶了，研发预算也不高，需要的技术人员水平自然也就降低，学多了用不上就只能频繁换地找些挑战，但是人到三十几岁就是个坎，要么就重复使用的用烂了么的技能，慢慢磨时间，要么就努力提升自己管理水平和业务沟通的水平，努力去带好团队。</p><p>健全制度的公司决定所有员工的工资，确定一个合适的晋升渠道，初创或者是传统的公司决定部门主管的薪资，主管决定你的薪资，但是不负责你的未来。 </p><p>做了项目经理之后好处还是很明显的，学习成长很快，因为很全面，也很琐碎，其实我一开始就明白，做项目经理是更加考验人的综合水平的。<br>主要变化分为三个方面:</p><p>一是能力成长阶段， 同样是团队管理，技术经理由于技术掌握的熟练性和设计思路方面的，有助于沟通的顺畅和权威，本身就是出于有利的地位，沟通的技巧在于直接解决问题或提供明确的解决思路。而项目经理在面对不同的岗位和事务，不可能面面俱到，事事周全，就需要更多沟通技巧，更多需要抉择和分配的瓜子片。各类项目报告和PPT汇报撰写能力，各种高效的工作方法和准确而简洁的沟通方式，还让不同特性的团队成员共同成长和快乐的能力。小到给来自天南地北的不同口味的同事领导点菜，温热酸甜苦辣，大到整个团建方案制定，事无巨细，都是一个项目能够顺利执行的重要条件。</p><p>二是职业生涯道路，职业规划铺开来在你的眼前，补充完善你已有的一些方案，让整体的愿景和目标更明确，也更富有竞争力。很多时候，大家都在海中或是浮浮沉沉，或是激流勇进，有的人朝着一个方向猛划，有的人顺着河流的方向静静消逝，但如果能看到彼岸，才更加会有走下去的决心和勇气，不然海中的每一朵浪花都会带偏远航的方向。</p><p>三是工作生活模式，更快的生活节奏，更多扑面而来的任务和压力，都让你时刻紧绷着神经，压榨你的潜力，提升你的工作效率和质量。以前老觉得在家里的台式电脑是游戏机，如今发现真有一堆工作压在身上，就算是在家里，办公效率真的也是高。项目经理不知是不是一个可以长期执行的工作，就我接手为止和做的几个项目为止，我觉得都需要全力以赴才能在限定条件下完成工作。这种转陀螺的状态有时要持续好几个月，也造成了工作和生活之间的不平衡。我觉得这种状态是很难长期维持的，让人精神和肉体上都非常疲倦。你必须承认，人的精力是有限的，特别是在做重要的决策，需要耗费的脑力和时间都是巨大的，即使时间偶尔空闲下来，也很难静下心去学习和沉淀。</p><p>先前学习英语的时候掌握到一个n+1的法则，指你本身的现有水平为i，而i+1代表理想的学习材料的应有难度，每个人每个阶段都有自己对自己的深度认知，明白阶段成长的必要性，没有一蹴而就的成功，没有一成不变的方法， 唯有保持学习、时刻自省，才能保证一步一个脚印往既定的路线走去。</p><p>最近发现考证是一个确定小目标的一种方式， 注册测绘师，注册规划师，信息系统项目管理师都可列入到备选学习计划中去。通读政策文件和经济要闻，记录脉络梳理条框，参与行业交流会，通过项目实践反馈，是一个人努力花十年，能成为真正专家的非必要充分条件。这就是我目前看到的比较完整和稳定的一条可达退休的职业生涯道路。</p><p>稍稍总结，作为这家公司的技术经理，我觉得很累，团队接口不规范，字段类型也是随随便便，性能优化、稍微难一点的算法或者是造个通用的轮子，都得忙活好几天。作为项目经理，也有一种挫败感，资源短缺，人手不勾那都是一些些小事，但是如果团队的能力平均水准是C的话，那就是没办法把整个项目从C提升到A的，更没办法去做圆满。</p><p>想到中庸，即也是无为而治，许多时候并不是一个人或是一个团队努力就能做好一件事，涉及的因素有多复杂，这件事你能左右的就越有限，要遵循自然，循规蹈矩去做，不要去过分责备自己。</p><p>脑子想的都是概念，实践出来都是细节。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程师进阶道路方向摸索</title>
      <link href="2020/02/24/%E5%89%8D%E7%AB%AF%E9%81%93%E8%B7%AF%E6%91%B8%E7%B4%A2/"/>
      <url>2020/02/24/%E5%89%8D%E7%AB%AF%E9%81%93%E8%B7%AF%E6%91%B8%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>首先要明确一点，正确评估自己的能力水平和性格特点，走技术专家路线还是走管理路线。技术专家也是有好几个方向的，一般还是与实际业务结合 偏应用路线解决方案，使自己的技术形成一个闭环。通过不断的学习使得解决方案构建升级。</p><p>因为打算走技术专家路线，整理几个前端比较常规的岗位和进阶方向，技术专家我觉得正常是其中几个自由组合吧。。</p><p>①Node服务端工程师:<br>所需掌握技能：</p><ul><li>能够基于 net 模块开发 Socket 应用并深度理解 HTTP 协议</li><li>彻底理解 Node.js 中的事件循环特性</li><li>能够使用 Cluster 开发多进程应用充分发挥多核 CPU</li><li>能够操作常见的 NoSQL 数据库并能够通过 Node.js 操作</li><li>能够掌握主流的 MVC Web 应用开发框架 Adonis、Egg</li><li>能够深入理解基于 GraphQL 标准开发现代化的应用层接口</li><li>能够使用 Node.js 开发基本的网络爬虫应用</li></ul><p>关键词<br>Socket、EventLoop、Cluster、Redis、MongoDB、Memcached、Adonis.js、Egg.js、GraphQL、微服务、Nightmare、Puppeteer </p><p>②计算机图形学工程师：</p><p>所需掌握技能：</p><ul><li>能够使用 HTML5 技术开发网页游戏</li><li>能够使用 WebGL 技术完成炫酷 3D 类图形效果</li><li>能够掌握常用的可视化库的应用</li><li>能够使用 Three.js 开发简单的 3D 网页游戏</li><li>能够使用 HTML5 游戏引擎开发网页游戏</li></ul><p>关键词<br>WebGL、Three.js、H5 游戏、游戏引擎、Cocos2d-x、Egret </p><p>③安全前端工程师<br>所需掌握技能</p><ul><li>熟悉常用操作系统及各版本浏览器特性，能使用这些特性来编写payload。</li><li>熟练使用html5、javascript、node.js等前端语言，并熟悉常用库。<br>深入理解xss、csrf等前端漏洞原理及特性。</li><li>有web应用白盒审计能力，能从源码中挖掘前端漏洞。</li><li>有大中型网站前端漏洞挖掘经验。</li></ul><p>④混合开发前端工程师<br>所需掌握技能：</p><ul><li>能够使用混合式 App 开发框架快速开发移动 App</li><li>能够配合原生应用开发 App 内嵌 H5 页面并可以通过 JSBridge 调用原生接口</li><li>能够使用 wepy / mpvue 框架开发小程序或快应用项目</li><li>能够使用 taro 多端统一解决方案同时完成移动 App、移动 Web、小程序的开发- 能够独立使用 React Native 开发原生 App- 了解 Weex / Flutter 等其他原生应用的前端技术开发方式</li><li>Flutter ? Flutter : React Native</li></ul><p>关键词<br>Cordova、Ionic、Webview + H5、JSBridge、mpvue、taro、Weex、Flutter</p><p>⑤webgis工程师<br>所需掌握技能：</p><ul><li>能够使用Leaflet/openlayers/mapbox/arcgis for js中的其中几种开发框架快速开发</li><li>能够配合调用arcgis server/geoserver原生接口</li><li>能够使用 turf/gdal等GIS分析框架开发做空间分析</li><li>能够深入理解基于postgis 空间数据数据库的分析应用</li><li>Java(java-spring-boot)</li><li>arc-python<br>关键词<br>openlayers、arcgis、geoserver、gdal、postgis </li></ul><p>⑥前端架构师</p><ul><li>构建前端开发自动化的工作流,包括脚手架,本地服务,规范检查,单元测试,部署发布等;</li><li>负责平台级产品前端架构体系的规划,设计,建设,包括移动端和PC端,通过技术提升用户体验和可用性。</li><li>负责基础库,框架和关键模块的开发和改进,负责微服务前端技术方案,架构设计及规范制定及核心功能研发。</li><li>制定前端开发规范,参与制定技术标准,编写相应的技术文档,对通用技术进行整理;</li><li>设计,开发可视化类库组件,对前端开发,数据可视化有自己的独立见解</li></ul><p>关键词<br>verdaccio、jest、webpack、linux、eslint</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020春</title>
      <link href="2020/01/25/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>2020/01/25/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="往年回顾"><a href="#往年回顾" class="headerlink" title="往年回顾"></a>往年回顾</h1><p>从年初而来算是一路通畅，没有卡在某个时间段太久，首先是接手前端主管工作，面试通过所有的前端人员前前后后二十余人，将研发中心的前端开发体系给搭建起来，CMMI认证，搭建运维系统及其子系统，三维基础系统和大数据平台大屏，及国土空间信息平台的项目管理工作，及到年终才开始的私有库搭建集成及组件开发工作，生活倒也丰满，途中难免有些小鬼难缠，大致也算顺顺利利的一年。</p><h1 id="工作与学习"><a href="#工作与学习" class="headerlink" title="工作与学习"></a>工作与学习</h1><p>因为公司都是项目定制型的产品开发，对总体前端水平的要求不是很高，所以面试题设计的都是基础题和算法题，在在找齐答案的过程中学习到了很多。期间也尝试让面试人员手写了一部分小算法，感觉这个分段（大雾）的开发水平对这块都比较勉强。所以后期改进成自带电脑上去codesandbox中让函数得以验证。CMMI认证的话算是多次参与了，过程其实比较简单，需要准备的材料比较多，注意将开发流程系统串联在一起，多用工具就行。项目参与对coding的提升倒是比较少，因为用的基本都是已经会的东西，加上工期比较短，反倒是回头重构了之前写的比较紧张的代码中收获了更多。在国土的项目管理工作中比较曲折，因为当时兼着几个代码开发工作，也没办法全身心投入到国土实际的项目管理中和产品总体规划中，偶尔出现多头着火，再加上该项目产品经理也是兼着多个产品的产品开发，前期松散的项目管理，几乎没有的顶层架构设计，使得接手之前的成果基础薄弱且BUG多。任职期间我主要推进整体系统架构设计工作进展，数据管理平台设计和云管理平台设计及开发，优化所有页面设计。后续为了更好的投入到这个关键项目中，逐渐将其他项目开发工作脱手，同时也建议抽调了一个专职的产品经理，但随后在我交接部分相关事务后，说明工作安排后，与产品经理在部分细节问题上，沟通存在一些问题和其他一些原因，就主动退出了国土空间基础平台的项目管理，前面还有点心疼，感觉刚种下的果实种子搭好了架子就被搬走，后面释然了，回归本职，转于研发中心的私有库搭建集成及组件开发工作。</p><p>先前说了一方面是项目管理和人员管理方面的学习，前端开发规范与组件开发规范整理外，另一方面在私有库搭建好之后，基础组件开发（通用API层对应spring boot/实例方法等），GIS库（openlayers）开发也有了一定的进展，计划是在20年上半年结束，随后就是基于封装好的OL库测试应用及培训，下半年希望是封装三维GIS库（cesium）（重要），个人学习上除了日常学习的粤语和英语外，主要是还是前端架构中的Service Worker/HTTP3，微前端及Web访问性能优化。</p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>订了婚，订了房，小小装修一下就搬了新家，算是免去了租房的痛，‘但也让本就不富裕的家庭雪上加霜’（万能句）。日常生活没有想象中的一波三折，吃吃喝喝一样没落下,也就没再敢大手大脚，到了年底大扫除贴上福字也就各自高高兴兴回家安安稳稳过年。<br>  除夕新冠病毒事件发酵，假期延长。躲在家里看书吃饭与家人打打扑克，没有往年那样的匆忙，作为程序员，整年整年电脑前的劳碌，真的需要丢开电脑让思绪放飞一下，去思考和总结，去享受亲情和信任，去跟老友吹水喝茶，交换真实的生活特性和情感，诸如这般才能感知到完整的生活和世界。</p><h1 id="总体评价"><a href="#总体评价" class="headerlink" title="总体评价"></a>总体评价</h1><p>项目管理期间学到了一个冷门知识，‘知识和强有力是冲突的,不是并立的，强有力不许人民有自由思想,因为这能使能力分散’。在项目管理中的意思呢就是如果产品设计和UI设计完整的话，底层码农是不需要太多的个人思想的，例如这个表单是不是合理，这个按钮有什么意义。如果在开发过程中发现有很多不合逻辑的地方，就说明这个设计并不够强有力。感觉也算是对一种规律的一个片面的诠释。</p><p>整体对自己的评价就是稳且尽力，收获蛮多，前端架构方面，项目管理和产品设计。也发现了自己的不足。例如说一件事情复杂，这件事情到底是怎么样的，过程其实不太重要，解决方案和结果才是领导所期望看到的。了解一个和评价一个人或事也需要不短的时间，才能看到骨子里，看进本质里。才能有效的把握住核心，以不变应万变。还有部分自己的缺点，就是锋芒毕露，经常被拿作例子和枪使，虽然一方面提高了出场率和促进倒逼成长,但是另一方面对人际关系而言，树立了一些隐患，同时也放大了自己性格上的不足之处。但这与自己的原则倒是息息相关的，个人觉得生活其实大部分就是物竞天择，适者生存，突出一个 “争” 字，本质是“妥协”，妥协同时也意味着不圆满。又例如，直立行走解放了双手，却也让我们更容易腰酸背痛；骨骼结构需要在健壮与灵活性之间做平衡。所以这一块问题，还没有一个合适的答案和解决方案。去年其实一直在考虑后面十年的路，毕业也四五年了，整体水平中等偏上，还是想努力一把，把天花板尽量架的高一点。修养方面也有了一些进步，摸到了一些苗头，没成框架，这玩意跟年龄阅历挂钩，倒是急不得，还是需要多看点书。</p><p>说到年龄，我又想唠叨一下，我发现发际线这件事情跟年龄关联是最为密切的，大部分人年轻的时候发际线低，头发也长长的酷酷的也没关系，也不怎么注意。等踏入职场，大多数人会选择剃个短发显得精神一些，再加上这个年龄段独有的发际线讯息轰炸，这时候才意识到了自己发际线的变化。</p><h1 id="告诫"><a href="#告诫" class="headerlink" title="告诫"></a>告诫</h1><p>新的一年，慎言！细心！戒躁!    </p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构二----Linux(verdaccio + gitlab)集成</title>
      <link href="2020/01/15/verdaccio+gitlab/"/>
      <url>2020/01/15/verdaccio+gitlab/</url>
      
        <content type="html"><![CDATA[<h1 id="安装verdaccio与gitlab集成部署和发布包"><a href="#安装verdaccio与gitlab集成部署和发布包" class="headerlink" title="安装verdaccio与gitlab集成部署和发布包"></a>安装verdaccio与gitlab集成部署和发布包</h1><p>1、安全性角度考虑:如果我们想要一个公共组件库，那么把组件放到我们私有库中，只有内网可以访问，这样可以避免组件中业务的泄露；<br>2、模块复用性角度考虑：多个项目之间有重复的共有模块，当需要修改模块，通过简单的统一的配置就可以实现；提炼后的组件有专门的地址可以用来查看，方便使用，在后期项目的引用中也能节约开发成本<br>3、npm包下载速度角度考虑：使用内部的地址，能够在开发下载node包的同时，将关联的依赖包缓存到verdaccio服务器中，下载速度更快；<br>4、项目开发中的路劲角度考虑：在项目开发中书写代码更整洁简练，不需书写更长的相对路径；<br>5、公司技术沉淀角度考虑：知识的沉淀，在公司业务相关的应用上尤佳；<br>6、版本角度的考虑：相当于一个容器，统一管理需要的包，保持版本的唯一；<br>7、开发效率角度考虑：使私有公共业务或组件模块能以共有包一样的管理组织方式，保持一致性，提高开发效率，下载的时候，可以让公共包走公共仓库，私有包走私有仓库；</p><p>基于Linux version 3.10.0-1062.9.1.el7.x86_64 </p><p>(mockbuild@kbuilder.bsys.centos.org) </p><p>(gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) )</p><h3 id="安装Verdaccio"><a href="#安装Verdaccio" class="headerlink" title="安装Verdaccio"></a>安装Verdaccio</h3><p><strong>管理员用户</strong></p><p><code>curl -sL https://rpm.nodesource.com/setup_10.x | bash -</code></p><p><code>sudo yum install -y nodejs</code></p><p><code>npm -v &amp;&amp; node -v</code> </p><p><code>npm config set registry https:*//registry.npm.taobao.org*</code></p><p><code>npm install --global node-gyp node-pre-gyp</code></p><p><code>npm install --unsafe-perm --global verdaccio</code></p><p><code>npm install -g pm2</code></p><p><code>yum install -y git</code></p><p><code>yum install -y lrzsz</code></p><p><code>useradd jamesxu</code></p><p><code>passwd jamesxu</code></p><p><code>vim /etc/sudoers</code></p><p><code>jamesxu ALL=(ALL)  NOPASSWD:ALL</code></p><p><strong>创建切换普通用户</strong></p><p> <code>su jamesxu</code></p><p>执行一遍verdaccio默认生成配置, 然后退出</p><p>查看当前位置的全路径 <code>pwd</code></p><p>上传LOGO到</p><p><code>rz -y</code>      </p><p><code>verdaccio</code><br><code>cd ~/.config/verdaccio</code><br><code>vim config.yaml</code></p><p>主要添加配置</p><p><code>listen:</code></p><p>  <code>- 0.0.0.0:4873</code></p><p>运行并添加开机启动</p><p><code>pm2 startup</code></p><p><code>pm2 start verdaccio</code> </p><p>pm2 设置自重启</p><p><code>pm2 save</code></p><p>创建完用户后，config.yaml修改max_users: -1来关闭用户注册然后重启动</p><h3 id="安装Gitlab"><a href="#安装Gitlab" class="headerlink" title="安装Gitlab"></a>安装Gitlab</h3><p>安装依赖插件</p><p><code>yum install policycoreutils openssh-server openssh-clients</code></p><p>如果有就需要关闭防火墙</p><p><code>systemctl stop iptables</code></p><p>添加gitlab国内yum源，并安装gitlab-ce</p><p><code>sudo curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</code></p><p>安装gitlab-ce</p><p><code>sudo EXTERNAL_URL=&quot;http://10.0.1.244&quot; yum install -y gitlab-ce</code></p><p>##gitlab基础命令##<br>关闭：gitlab-ctl stop<br>启动：gitlab-ctl start<br>重启：gitlab-ctl restart<br>状态：gitlab-ctl status</p><p>重置：gitlab-ctl reconfigure （如果修改了IP会导致nginx/gitlab-page.conf 的配置发生重置）</p><h3 id="开启gitlab-pages"><a href="#开启gitlab-pages" class="headerlink" title="开启gitlab pages"></a>开启gitlab pages</h3><p>编辑 /etc/gitlab/gitlab.rb文件，修改如下两行(注意#号要去掉)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##! Define to enable GitLab Pages</span><br><span class="line">pages_external_url &quot;http:&#x2F;&#x2F;R7102&#x2F;&quot;</span><br><span class="line">gitlab_pages[&#39;enable&#39;] &#x3D; true</span><br></pre></td></tr></table></figure><p>重启GitLab，使得GitLab Pages功能生效（也生成了nginx的配置文件gitlab-page.conf）</p><p><code>gitlab-ctl restart</code></p><p>1、Pages部署目录：/var/opt/gitlab/gitlab-rails/shared/pages</p><p>2、内置Nginx目录：/var/opt/gitlab/nginx</p><p>修改Nginx配置文件</p><p><code>cd /var/opt/gitlab/nginx/conf/</code></p><p>找到gitlab-page.conf这个文件（如果没有说明安装步骤有问题）</p><p>修改配置（红点代表要重点修改的地方）</p><p><code>vim gitlab-page.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">​ listen 9000; ## 端口根据需要填写</span><br><span class="line">  server_name 10.0.1.244; ## IP根据实际情况填写</span><br><span class="line">  server_tokens off; ## Don&#39;t show the nginx version number, a security best practice</span><br><span class="line"></span><br><span class="line">## Disable symlink traversal</span><br><span class="line"></span><br><span class="line">  disable_symlinks on;</span><br><span class="line"></span><br><span class="line">  access_log  &#x2F;var&#x2F;log&#x2F;gitlab&#x2F;nginx&#x2F;gitlab_pages_access.log gitlab_access;</span><br><span class="line">  error_log   &#x2F;var&#x2F;log&#x2F;gitlab&#x2F;nginx&#x2F;gitlab_pages_error.log;</span><br><span class="line"></span><br><span class="line"># Pass everything to pages daemon</span><br><span class="line"></span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line"></span><br><span class="line"># 指向pages的发布目录</span><br><span class="line"></span><br><span class="line">​    root &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;gitlab-rails&#x2F;shared&#x2F;pages;</span><br><span class="line">​    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"># Define custom error pages</span><br><span class="line"></span><br><span class="line">  error_page 403 &#x2F;403.html;</span><br><span class="line">  error_page 404 &#x2F;404.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gitlab-ctl restart nginx</code></p><p>安装gitlab runner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:&#x2F;&#x2F;packages.gitlab.com&#x2F;install&#x2F;repositories&#x2F;runner&#x2F;gitlab-runner&#x2F;script.rpm.sh | sudo bash</span><br><span class="line">sudo yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure><p>然后注册runner</p><p><code>gitlab-runner register</code></p><p>输入在gitlab页面里面提示的url和token即可注册成功</p><p>最后是gitlab-runner授权和编写.gitlab-ci.yml文件</p><p>需要注意的一点是：</p><p>如果项目在group里的的话，page页面地址</p><p><a href="http://10.0.1.244:9000/+" target="_blank" rel="noopener">http://10.0.1.244:9000/+</a> group名称 + / + 项目名称 + /public/</p><p>如果是私建项目的话，page页面地址</p><p><a href="http://10.0.1.244:9000/+" target="_blank" rel="noopener">http://10.0.1.244:9000/+</a> 用户账号+ / + 项目名称 + /public/</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构技术整理</title>
      <link href="2019/12/15/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
      <url>2019/12/15/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>前端近五年了， 按照一万小时定律，我现在应该也不平凡了，但是到超凡，那也还没有。 笼统点的自我感觉就是基本点都通了，应用类的技能都能用上，像是读完了高中。天文地理生物化学都知道些脉络，但是再细致一些，就需要更系统地进阶性学习。</p><p>前端架构师的职责 促进前端工程化、服务化，持续提升研发效率，保障线上产品质量； 作为前端架构师, 首先要解决的问题就是让日益膨胀的代码可控,</p><p> 基本职能为：</p><ul><li><p>梳理代码</p></li><li><p>建立架构</p></li><li><p>组织文档</p></li><li><p>管理架构的更新和维护</p></li><li><p>评审技术方案对架构的影响</p></li><li><p>核心模块的方案设计</p></li><li><p>重点项目的方案设计</p></li><li><p>CodeReview 等.</p><p>其实核心模块(api风格，代码规范，数据规范) 架构师和资深开发在工作职责上有着明确的界限, 在一个没有架构师的团队, 每一个资深开发或多或少都承担了一部分架构的工作, 但都是破碎的, 不成体系而且不统一, 从某种意义上讲, 这种隐晦的架构还不如没有架构. 所以确立一名架构师, 从管理上也是将混乱统一的唯一途径。<br>在团队还小的时候, TL 可能会默认承担架构师的角色, 但团队规模增长到一定程度, TL会变得力不从心起来, 将工作分给专业的人, 永远都是工程上自然而然的结果. 相比实际的 coding, 用一段代码解决某个问题, 实现某个需求, 架构要复杂和烧脑的多, 本质上工程的问题, 只能用架构解, 而没法用代码解, 所以没有架构, 谈不上工程化. 因此架构师的第一要务, 是梳理代码确立架构。</p></li></ul><p>根据我近两年的实践总结，重新整理完善，一个新研发部门前端团队建设中，应该要走的前端架构之路。</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://blog.jamesxu.wang/2020/03/12/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">开发规范(Eslint.注释等)的确定及统一脚手架</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://blog.jamesxu.wang/2020/01/15/verdaccio+gitlab/" target="_blank" rel="noopener">自建Gitlab版本管理及verdaccio组件库搭建及组件开发(对应微服务的API层、通用util组件)</a></li><li><input checked="" disabled="" type="checkbox"> 自动编译发布Jenkins/walle（待编写）</li><li><input checked="" disabled="" type="checkbox"> 符合已有工程的微前端体系设计及建立(特定中心路由基座式)（待编写）</li><li><input checked="" disabled="" type="checkbox"> 基础运维系统(权限管理/单点登录/监控和报警/日志)(字典/通用业务数据)（文档待编写）</li><li><input disabled="" type="checkbox"> Node中间层BFF(埋点系统)<a href="鉴权SSO">(数据中台) = (部分GraphSQL) = (公共业务)</a>(Mock)</li><li><input disabled="" type="checkbox"> 智能建表系统 =&gt; 减少通用表单流程系统开发工作(非必须)</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构一----前端开发规范</title>
      <link href="2019/08/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>2019/08/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么需要-“前端开发规范”"><a href="#1-为什么需要-“前端开发规范”" class="headerlink" title="1. 为什么需要 “前端开发规范”"></a>1. 为什么需要 “前端开发规范”</h2><p>规范不是强制性的，对代码的编写和程序的运行不会有致命的问题，但是没有规范会有一系列的问题，比如：</p><ul><li>缺乏规范，第一个问题就是团队编码风格不一，增加了成员之间代码的阅读成本，加大了团队协作成本和维护成本；</li><li>随着团队人员的变化（多人开发一个应用，或者应用更换开发人员），如果缺乏规范，项目可能会变得一团糟，甚至失控；</li><li>即便是个人开发，规范也是需要的，当把项目转给其他人的时候，如果有规范的话，会大大降低阅读成本。</li><li>…</li></ul><p>所以，建立一套适合团队的开发规范是很受用的。</p><h2 id="2-开发规范分类"><a href="#2-开发规范分类" class="headerlink" title="2. 开发规范分类"></a>2. 开发规范分类</h2><p>这里不涉及工作流程规范，因为每个团队的工作流程都不一样，这是跟公司相关的，与开发没有太大关系。一般来说，有以下几类规范：</p><ul><li>编码规范</li><li>项目结构规范</li><li>框架、工具规范</li><li>其他约定</li></ul><h3 id="2-1-编码规范"><a href="#2-1-编码规范" class="headerlink" title="2.1 编码规范"></a>2.1 编码规范</h3><ul><li><p><code>html</code>: 主要有缩进，标签，加载顺序等等。可以参考：</p><ul><li><a href="http://imweb.github.io/CodeGuide/" target="_blank" rel="noopener">Code Guide</a></li></ul></li><li><p><code>css</code>：主要有缩进，换行，引号，注释等等。可以参考：</p><ul><li><a href="https://github.com/necolas/idiomatic-css" target="_blank" rel="noopener">idiomatic-css</a></li></ul></li><li><p><code>js</code>：主要有缩进，换行，变量名称，括号，文档注释等等。可以参考：</p><ul><li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb js style</a></li><li><a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noopener">google js style</a></li><li><a href="https://github.com/rwaldron/idiomatic.js" target="_blank" rel="noopener">idiomatic js style</a></li><li><a href="https://github.com/standard/standard" target="_blank" rel="noopener">standard js style</a></li></ul></li></ul><p>其实，我一般参考的是 <a href="http://imweb.github.io/CodeGuide/" target="_blank" rel="noopener">Code Guide</a></p><h3 id="2-2-项目结构规范"><a href="#2-2-项目结构规范" class="headerlink" title="2.2 项目结构规范"></a>2.2 项目结构规范</h3><p>项目结构规范包括文件、目录命名规范，模块化分组规范，组件化规范等等，这些规范有些是构建工具要求的，有些是团队自己定的。</p><p>以下是一些示例：</p><ul><li><p>命名规范：参考 <a href="http://imweb.github.io/CodeGuide/" target="_blank" rel="noopener">Code Guide</a></p><ul><li>全部采用小写方式， 以下划线分隔。例：<code>my_project_name</code></li><li>完整英文命名的用复数形式，缩写用单数形式。例：<code>scripts, js, styles, css, images, img</code></li></ul></li><li><p>模块化分组规范：以 <a href="https://github.com/senntyou/lila" target="_blank" rel="noopener">lila</a> 构建工具为例</p><ul><li><code>/project/src/home/</code>: home 页的工作空间（以下所有文件或目录都在这个目录下）</li><li><code>index.html</code>: html 入口文件</li><li><code>index.js</code>: js 入口文件</li><li><code>index.(css|less|scss)</code>: 样式入口文件</li><li><code>js/</code>: js 文件目录<ul><li><code>js/ajax/</code>: 对 ajax 封装的目录</li><li><code>js/util/</code>: 工具类函数的目录</li><li><code>js/pages/</code>: spa 应用页面目录</li><li><code>js/data/</code>: 静态数据目录</li><li><code>js/tpl/</code>: 模板目录</li><li><code>js/(event|view)/</code>: 事件监听文件目录</li><li>…</li></ul></li><li><code>data/</code>: 本地 json 数据模拟</li><li><code>(css|less|scss)/</code>: 样式文件目录</li><li><code>images/</code>: 图片文件目录</li><li><code>components/</code>: 组件目录（如果基于 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a>, <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a> 等组件化框架）</li><li>…</li></ul></li><li><p>组件化规范：这里的组件化并不是指在代码、框架层面的组件化，而是在架构和规范层面的组件化</p><ul><li><code>/project/src/component/hello/</code>: hello 组件的工作空间（以下所有文件或目录都在这个目录下）</li><li><code>README.md</code>: 组件的说明，包括功能介绍、api 文档、一些用例等等</li><li><code>index.js</code>: 组件的入口文件，调用组件将使用如下的方式（如果有样式文件，则要在 js 中加载）<ul><li><code>commonjs</code>: <code>const hello = require(&#39;component/hello&#39;)</code></li><li><code>es6</code>: <code>import hello from &#39;component/hello&#39;</code></li></ul></li><li><code>demo/</code>：用例目录</li><li>…</li></ul></li></ul><h3 id="2-3-框架、工具规范"><a href="#2-3-框架、工具规范" class="headerlink" title="2.3 框架、工具规范"></a>2.3 框架、工具规范</h3><h4 id="框架和-UI-库"><a href="#框架和-UI-库" class="headerlink" title="框架和 UI 库"></a>框架和 UI 库</h4><ul><li>在技术上，每个团队都有框架选型，都遵循一定的规范协作。基本上从团队搭建之初便需要定下今后团队的技术选型，并且最好不要更改选定好的框架和 UI 库，因为不同的框架、不同的 UI 库一般相互之间是不兼容的；同时用多个框架或 UI 库也是要尽量避免的；</li><li>框架选型：经典的 <a href="https://github.com/jquery/jquery" target="_blank" rel="noopener">jquery</a> + <a href="https://github.com/twbs/bootstrap" target="_blank" rel="noopener">bootstrap</a>，比较现代化的 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> + <a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">ant-design</a>|<a href="https://github.com/mui-org/material-ui" target="_blank" rel="noopener">material-ui</a>|<a href="https://github.com/Semantic-Org/Semantic-UI" target="_blank" rel="noopener">Semantic-UI</a> （因为我主要是以 react 为组件库做开发，所以对 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a> 的技术选型不是很了解，&gt;_&lt;）</li></ul><h4 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h4><p>构建工具的使用使开发变得极为便利和高效，工具在提升工作效率的同时，也同时提供了约束团队编码规范、项目结构规范等的可能性。</p><ul><li><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>：一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</li><li><a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a>：一个强大和现代的 CSS 审查工具，有助于开发者推行统一的代码规范，避免样式错误。</li><li><a href="https://github.com/CSSLint/csslint" target="_blank" rel="noopener">csslint</a>：与 <code>stylelint</code> 类似</li></ul><p>约束项目结构规范需要团队讨论来定，但基本上需要满足以下几个需求：</p><ul><li>便利性：能够快速的定位文件位置，对编辑器友好</li><li>解耦性：不同页面之间，不同组件之间是相互解耦的，不会更改一个组件或页面而影响到其他组件或页面</li><li>扩展性：能够很方便的扩展组件和页面，而不会带来副作用</li><li>阅读性：具有很好的阅读性，对组件、页面以及内部结构能够一目了然</li></ul><p>以 <a href="https://github.com/senntyou/lila" target="_blank" rel="noopener">lila</a> 构建工具为例，它的 <code>工作空间</code> 概念便很好的满足上述所有需求：</p><p>比如，home 页的工作空间（<code>/project/src/home/</code>），这个页面（或者组件）所有文件都在这个目录下，包括 js、css、html片段、图片、json模拟数据等等。</p><ul><li>开发的时候，都只在这个目录下工作，避免多级目录的不断切换（当工程很大的时候，这是个大问题）</li><li>当新添加一个页面或组件的时候，直接复制一个原有的页面或组件，这是极为方便的</li><li>解耦当然就不用说了，内部结构也是很清晰的</li></ul><h3 id="2-4-其他约定"><a href="#2-4-其他约定" class="headerlink" title="2.4 其他约定"></a>2.4 其他约定</h3><p>如：</p><ul><li>每个 js 文件不应该超过 <code>400</code> 行，超过就应该分块</li><li>每个 css 文件不应该超过 <code>200</code> 行，超过就应该分块</li><li>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3度带的还是6度带记录</title>
      <link href="2019/01/19/3%E5%BA%A6%E5%B8%A6%E7%9A%84%E8%BF%98%E6%98%AF6%E5%BA%A6%E5%B8%A6%E8%AE%B0%E5%BD%95/"/>
      <url>2019/01/19/3%E5%BA%A6%E5%B8%A6%E7%9A%84%E8%BF%98%E6%98%AF6%E5%BA%A6%E5%B8%A6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>**地球的一度是 6378km*3.1416*2/360=111.3km，</p><p>3 度带是从中央向两边各 1.5 度，就是 167km，加上横轴加常数 500km，最大为 667km；</p><p>6 度带是从中央向两边各 3 度，就是 334km，加上横轴加常数 500km，最大为 834km</p><p><strong>我国采用 6 度分带和 3 度分带：</strong> 1∶2.5 万及 1∶5 万的地形图采用 6 度分带投影，即经差为 6 度，<strong>从零度子午线开始</strong>，自西向东每个经差 6 度为一投影带，全球共分 60 个带，用 1，2，3，4，5，……表示．即东经 0 ～ 6 度为第一带，<strong>其中央经线的经度为东经 3 度</strong>；东经 6 ～ 12 度为第二带，其中央经线的经度为 9 度。 1∶1 万的地形图采用 3 度分带，<strong>从东经 1.5 度的经线开始</strong>，每隔 3 度为一带，用 1，2，3，……表示，全球共划分 120 个投影带，即东经 1.5 ～ 4.5 度为第 1 带，其<strong>中央经线的经度为东经 3 度，</strong>东经 4.5 ～ 7.5 度为第 2 带，其中央经线的经度为东经 6 度。</p><p>地形图上公里网横坐标前 2 位就是带号，例如：1∶5 万地形图上的横坐标为 18576000，其中 18 即为带号，293300 为纵坐标值。</p><p>*<em>当地中央经线经度的计算  *</em> 六度带中央经线经度的计算：当地中央经线经度＝ 6°× 当地带号－3°，例如：地形图上的横坐标为 18576000，其所处的六度带的中央经线经度为：6°×18－3° ＝ 105°。 三度带中央经线经度的计算：中央经线经度＝ 3°× 当地带号。</p><p><em>一个好记的方法:在中华人民共和国陆地范围内,坐标(横坐标,8 位数,前两位是带号)带号小于等于 23 的肯定是 6 度带，大于等于 24 的肯定是 3 度带。</em></p><p><strong>只知道经纬度时中央经线的计算</strong> 将当地经线的整数部分除以 6，再取商的整数部分加上 1°。再将所得结果乘以 6 后减去 3°，就可以得到当地的中央经线值。 如 106°15′00″，用 106°/6 取整得 17°，（17°+1°）*6-3°=105°，即当地的中央经线值为 105°。</p>]]></content>
      
      
      <categories>
          
          <category> webgis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年终总结</title>
      <link href="2019/01/17/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>2019/01/17/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>时光飞逝朋友，距离我的上一篇博客又是一个半年。我时常提醒思想荒芜而又工作忙碌的自己去更新博客，但真正要起笔构思的时候才一声感叹，生活中细琐而又有意思的小事早已从记忆中溜走。而那些零零碎碎记录和收藏，只剩下一些技术小抄和心灵鸡汤。 </p><p>日子渐渐走过去，生活也只剩下了柴米油盐。_生活正不可避免地走向庸俗。_生活并没有那么安稳，死亡面前人人平等，唯有坦荡面对死亡之时,一个人的自我才真正诞生。我向来不惮以最坏的打算揣测生活的，最差最差也就人固有一死，生如夏花而死如秋叶。再而就生死看淡，不服就干，拼着一身剐，敢把皇帝拉下马。再而便是兢兢业业，活在当下，朝吟诗词暮听风。再而便是苟着发育，保持希望，悼日月之逾迈而叹功名之不立。最后才是平凡与庸俗，而那现实生活就像是一家医院，每个人都疲于更换自己的病床。有的人在大城市里，经历着拼杀，负伤累累，偶尔po出的，聊以自慰的“岁月静好”中哀叹；有的人回到了家乡，进了体制，领了结婚证，在闲适中，经历着和长辈们一样的“波澜不惊”，看透了退休前三十年的自己。相同的是，每个人年轻的时候，或多或少都厌恶庸俗的生活，害怕有一天会成为身体发福的中年人，皮肤暗淡眼圈浮肿，对一切失去热情，囿于昼夜、厨房与爱，等着衰老和死亡到来。生活向来如此，流水一般的庸俗，昙花一现的美丽，从幼稚园到工作，身边朋友换了一茬又一茬断断续续失去联系，大多怀揣着希望而来和失望离去，醒时相交欢，醉后各分散。</p><a id="more"></a><p> 真正的成长，是从自我觉知，修正世界观，完善自身修养，一往无前开始的。自我觉知，我觉得应该跟佛教禅修的正念差不多，与单纯的反省有些区别，反省只是某一个特定的时间段做的思想活动，而自我觉知却是一种需要养成习惯的生活状态。是以一种超脱的视角去看待自己的一切，像是FPS游戏中的第三人称视角，去时刻关注反省自己的行为，与七宗罪哪些有联系，为什么会这样做，一旦觉察了，想开了，路子便走宽了。进而修正世界观，不断的去感知社会反馈的信息，找到生存与竞争的规则去修正自己的弱点，挖掘核心竞争力去肯定自己，并完善自身修养。有些人在童年成长的环境影响下，形成一种固定的行事的路子，通常情况下都存在一些明显的个性化特征，长大后发现有的不太适用，就需要在重复的自我觉知中修改。等到你辩证自我发现基本已经没什么问题了，这时候一往无前，除了运气，就没有什么可以顾虑的了。这时候生活是不会让一个人就得一直庸俗着的，直到放弃。法律界有句格言：当事实对你有利时，那就多强调事实；当法律对你有利时，多强调法律；当事实和法律都对你不利时，就拍桌子。 </p><p>_在人世间有一种庸俗势力的大合唱,谁一旦对它屈服,就永远沉沦了,真是可惜。_我如今也有了一些烦恼，妻子大人在成长的道路上也迷失了方向，生活一度被综艺和肥皂剧填满。知足常乐，固然安然自在。但其实心底还是有些小失望，如我这种漂泊他乡的，毕业后不太年轻的正努力靠近中产阶级的来讲，唯有持续的更努力的拼搏才看得到立足立身立命的希望。正如当前移动互联网的主题：持续学习，野蛮生长。许多人始终想不清楚，也就当一份青春饭来啃。去年我在吐槽同事上班天天划水的时候，东哥取笑我说，你后面可能也会跟他一样。我笑着摇摇头不知道说什么好。</p><blockquote><p>Every man dies, not every man really lives.</p></blockquote><p>平凡的生活千篇一律,希望朋友们都能保持住神圣的不满，保持好奇心，负重前行。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布image格式（大）文件作为底图（切片or不切片）</title>
      <link href="2018/11/19/%E5%8F%91%E5%B8%83image%E6%A0%BC%E5%BC%8F%EF%BC%88%E5%A4%A7%EF%BC%89%E6%96%87%E4%BB%B6%E4%BD%9C%E4%B8%BA%E5%BA%95%E5%9B%BE%EF%BC%88%E5%88%87%E7%89%87or%E4%B8%8D%E5%88%87%E7%89%87%EF%BC%89/"/>
      <url>2018/11/19/%E5%8F%91%E5%B8%83image%E6%A0%BC%E5%BC%8F%EF%BC%88%E5%A4%A7%EF%BC%89%E6%96%87%E4%BB%B6%E4%BD%9C%E4%B8%BA%E5%BA%95%E5%9B%BE%EF%BC%88%E5%88%87%E7%89%87or%E4%B8%8D%E5%88%87%E7%89%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>公司项目需要发布一张工程CAD底图，考虑到成本和效率，不考虑arcgisServer，然后就用geoserver进行发布服务的过程中发现了其他各种方案。进而打算找处理软件来对源图片直接进行切片放在服务器上自定义的XYZ加载，但是找了许多天都没有找到简单好用的一键切片及配准软件工具。所以自己总结了一下网上找的几种方案。</p><ul><li>deep zoom composer（切片太简陋有点摸不着头脑）</li><li>GMapImageCutter  切片的格式比较奇怪搞不定（谷歌地球专用？）</li><li>MapTiler  切片简单好用带demo，但是不付费有水印</li><li>MapCruncher 这个话，测试发现2.3.1版已经打不开了（我也想要个能用的）</li><li>GDAL工具切片（直接PYTHON調用或是在QGIS 使用）（最友善）</li><li>geoserver直接发布worldImage 文件（小文件可行）（不需要切片直接发布，最好有坐标配置文件）（最便捷）</li></ul><p><strong>总结了其中的两种思路，其他详细步骤在网上可以查到：</strong> <strong>第一种</strong>情况是需要与现实地图重合配准的，所以就打算重拾老本行，用arcgis处理成tif格式，配准后导出geotiff使用geoserver发布,</p><ol><li>打开arcmap加载具有参考坐标的地图和需要发布的来源图片</li><li>打开地理配准工具条选择自定义-工具条中的地理配准（Georeference）并勾选</li><li>选择控制点（大于3个，建议7个）（注意可以设置图层透明度查看匹配程度）然后校正保存</li><li>重新加载保存的数据（建议重启arcmap），打开arcToolBox，在<strong>转换工具</strong>中找到<strong>转为栅格</strong>中的<strong>栅格转其他类型（批量）</strong>，导出成带有坐标的Geotiff.</li><li>geoserver 发布geotiff</li><li>ol加载geoserver~ImageWMS</li></ol><p><strong>第二种</strong>是不要配准的，类似旅游一张图，或者是工程坐标图（CAD设计图）之类的，我使用NodeJS+ express 写了个上传调用GDAL-python中的gdal2tile.py的脚本自动切片。 安装python工具和安装GDAL软件库（注意版本一定要对应上，3.4的和3.7的完全不一样）、（GDAL-2.2.4-cp37-cp37m-win_amd64）+（python-3.7.0-amd64） 检查安装环境（PYTHON、PYTHON/Scripts及GDAL的文件夹路径放入PATH）, 直接切图 </p><p><code>gdal2tiles.py [-p profile] [-r resampling] [-s srs] [-z zoom] [-e] [-a nodata] [-v] [-q] [-h] [-k] [-n] [-u url] [-w webviewer] [-t title] [-c copyright] [--processes=NB_PROCESSES] [-g googlekey] [-b bingkey] input_file [output_dir]</code></p><p> gdal2tiles.py -p mercator -z 切片级别 -w 查看的平台 -t 名称 -r 重采样方案 -s EPSG:4326 -a 0.0 输入文件路径.jpg 输出文件路径 例子：（gdal2tiles.py -p raster -z 3-6 -w all -t 123 -c 1 -r average -a 0.0 D:/arcgisData/gis/7891.png D:\arcgisData\gis\20180824） 简单的node的后台代码（需要配node环境）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> multer  = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">var</span> nodeCmd = <span class="built_in">require</span>(<span class="string">'node-cmd'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123;<span class="attr">dest</span>: <span class="string">'public/upload_temp/'</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line">router.post(<span class="string">'/'</span>, upload.any(), <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.files\[<span class="number">0</span>\]);  <span class="comment">// 上传的文件信息</span></span><br><span class="line">    <span class="keyword">var</span> des_file = <span class="string">"public/acture/"</span> + req.files\[<span class="number">0</span>\].originalname;</span><br><span class="line">    fs.readFile( req.files\[<span class="number">0</span>\].path, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( err )&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( err );</span><br><span class="line">                res.end( <span class="built_in">JSON</span>.stringify( err ) );</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                response = &#123;</span><br><span class="line">                    message:<span class="string">'File uploaded successfully'</span>,</span><br><span class="line">                    filename:req.files\[<span class="number">0</span>\].originalname</span><br><span class="line">                &#125;;</span><br><span class="line">                runCmdTest(des_file);</span><br><span class="line">                <span class="built_in">console</span>.log( response );</span><br><span class="line">                res.end( <span class="built_in">JSON</span>.stringify( response ) );</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runCmdTest</span>(<span class="params">abc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> host_dir = <span class="string">'public/dataForTile/adc'</span>;</span><br><span class="line">    <span class="keyword">var</span> path = <span class="string">'gdal2tiles.py -p raster -z 3-6 -w all -t 1 -c 1 -r average -a 0.0 '</span>+abc+<span class="string">' '</span>+host_dir;</span><br><span class="line">    nodeCmd.get(</span><br><span class="line">        path,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">err, data, stderr</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>把切出后的整个文件夹放在IIS或是tomcat下面，然后使用TileImage调用即可~ openlayer5核心加载代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">source : new ol.source.TileImage(&#123;</span><br><span class="line">    wrapX:false,</span><br><span class="line">    crossOrigin: &#39;anonymous&#39;,</span><br><span class="line">    tileUrlFunction : function(tileCoord)&#123;</span><br><span class="line">        if (!tileCoord) &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        var z &#x3D; tileCoord\[0\];</span><br><span class="line">        var x &#x3D; tileCoord\[1\];</span><br><span class="line">        var y &#x3D; Math.pow(2, z-1) + tileCoord\[2\];</span><br><span class="line">        var path &#x3D; res.CadFilePath +  &quot;&#x2F;&quot; + z + &quot;&#x2F;&quot; + x + &quot;&#x2F;&quot; + y + &quot;.png&quot;;</span><br><span class="line">        &#x2F;&#x2F; 非常粗糙，需要验证</span><br><span class="line">        if((z&#x3D;&#x3D;3&amp;&amp;x&lt;&#x3D;4&amp;&amp;x&gt;&#x3D;0&amp;&amp;y&lt;&#x3D;3&amp;&amp;y&gt;&#x3D;0)||(z&#x3D;&#x3D;4&amp;&amp;x&lt;&#x3D;9&amp;&amp;x&gt;&#x3D;0&amp;&amp;y&lt;&#x3D;6&amp;&amp;y&gt;&#x3D;0)||(z&#x3D;&#x3D;5&amp;&amp;x&lt;&#x3D;18&amp;&amp;x&gt;&#x3D;0&amp;&amp;y&lt;&#x3D;12&amp;&amp;y&gt;&#x3D;0)||(z&#x3D;&#x3D;6&amp;&amp;x&lt;&#x3D;36&amp;&amp;x&gt;&#x3D;0&amp;&amp;y&lt;&#x3D;25&amp;&amp;y&gt;&#x3D;0))&#123;</span><br><span class="line">            return path;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return &#39;..&#x2F;..&#x2F;..&#x2F;images&#x2F;none.png&#39;;     &#x2F;&#x2F; var emptyTileURL &#x3D; &quot;http:&#x2F;&#x2F;www.maptiler.org&#x2F;img&#x2F;none.png&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>知识点不多，跨度有点大,有点杂。放后台切片代码凑字数哈哈哈哈啊</p>]]></content>
      
      
      <categories>
          
          <category> webgis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年终总结</title>
      <link href="2018/02/16/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>2018/02/16/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>小酌三两次，出差三两月，归家三两趟，看似丰硕的一年，翻起回忆又空空如也。近一年的工作在广州，人海潮涌，一种骨子里的渺小感不断的从身体各处渗透出来，像个普通的钉子扎根在了社会的大转盘中滚滚前行，居大不易。</p><p> <strong>一</strong> </p><p>日常七点多起身，半个小时的公交，途中有时听歌，有时听广播，有时听听电台，但无论听什么，思绪飘忽，从未在这内容里，流连于窗外的景色，尽管于昨日并无太多新奇变化，但也不会厌倦。车内依旧拥挤不堪，许多人如以往一般，在昨日发呆的位置发呆，在昨日下车的车站下车，没有人享受这日常而又短暂的旅途，也没有人咒骂着这个该死的早上。 提前半个小时到岗，啃着面包漫刷刷热搜时政，笑着跟邻近就位的同事们请早，有条不紊地开始工作，午饭，午休，下午茶喝杯咖啡傍晚准备收工，草草地关上电脑，带着放松的心情，收拾桌子，打完招呼起身回家。平常，莫不过是平凡，或许是逐渐意识到了这种平凡，我开始讨厌这种生活。 央视主持人马东说这世界只有5%的人有愿望，积累知识，了解过去。剩下的95%就是在活着。这话我寻思了一番，想换个方式讲，每日生活里95%都在本能中活着，本能中工作学习，本能中吃饭洗澡睡觉，本能的总结经验，回忆过去，翻翻综艺，阅读消息推送。或许剩下的时间，短到不能再短一点的12分钟，乃至更少的时间去暂停生活，去思考，这就是那个5%。 为什么要思考，思考些什么？问起自己这个问题我的脑袋快要裂开，发现也快找不到自己的灵魂了。生活明明已经努力朝着前进的方向走，愈发的遵从本能而活，但心中还是涌起一阵不安，似乎缺失了些什么，这种生活可以过一辈子么？或是平凡的生活最是消磨梦想，梦想逝去愈加平凡？平凡生活的定义又是什么？ </p><p><strong>二</strong> </p><p>有句话讲，年轻时就释怀与淡泊，是没有希望的。便想起曾看到一条新闻，<em>《周星驰出席广东省政协会议 满头白发》</em> ，时光荏苒,岁月催人老，生日相差五天的周星驰和梁朝伟都准备过第56个生日了，想起九零年代的香港影坛盛世，这个时候也正是星爷事业巅峰。浮夸的演技，肆意的笑容和异于常人的演艺圈天赋，也让他在人生中脱颖而出。而毕业后刚步入社会不久的我们手中紧握起保温杯，即将步履蹒跚踏入壮年，不知是如何以自己的独特出彩亦或是在社会的大熔炉里接受改造。《深夜食堂》里说：世间有如流离迷失的戾川，别轻视人生啊。于大多数人而言，活着体面已不易了。 说起成功，大我一届的学长朋友前年创业，次年开了辆奔驰回来了威风满面，这也许并不是个意外的消息，早先知他信心十足，能说会道，再加上为人勤奋吃苦巧捷万端。如今脸上充满着谜一样的成功人士气息，年前与我宣讲他的草根创业经历，从拉起一个团队，渡过最困难的时期，如何利用起身边的资源，最终实现创收，意气风发。但我深知每个人的走的路都不可复制，大家都一样地默默在努力，属于自己那份胜利或许会迟到，但是一定不会缺席。</p><p> <strong>三</strong></p><p> 舒适区，此前一直觉得这个词是贬义词。后面仔细琢磨，活着让自己感觉舒适，全身心放松，似乎也正是此生追求的终极目标。粗茶淡饭是一天，荣华富贵也是一天，抛弃一切，舒适招手即来。自尊这时却是一个好东西，即使你没有太长远的目标，只要三观正路子稳，贫穷总会悄悄驱使你往前走，摸索属于自己的定位和归属。生活让一个普通人感到舒适而幸福的方式极其简单，小而全的居室，家人的欢笑及热乎的饭菜，但满足却远远不够。人类总有数不尽的精力和想象力，只需活好自己的日子实在是太容易了也太无味。况且时间如此短暂，一直停留在一个地方徘徊，总是有点浪费。</p><p> Coca-Cola在超级碗的广告选段: </p><p>No feet have wandered where you’ve walked, No eyes saw what you’ve seen. </p><p>No one’s lived the life you live, No head has held your dreams. </p><p>To act the same would be mundane— what a boring thing to do! </p><p>That’s why there is just one me and a billion unique yous. </p><p>Namely - 埋头前行。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二元运算符，三元运算符在JS中的学习</title>
      <link href="2018/02/06/%E4%BA%8C%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%8C%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E5%9C%A8JS%E4%B8%AD%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>2018/02/06/%E4%BA%8C%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%8C%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E5%9C%A8JS%E4%B8%AD%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>源于在扩展LayUI后台框架源码的tree模块时发现的，将其混淆的代码稍稍还原一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">layuiTree.prototype.tree = <span class="function"><span class="keyword">function</span>(<span class="params">$elem, a</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span> , options = self.options , nodes = a || options.nodes; </span><br><span class="line"></span><br><span class="line">layui.each(nodes, <span class="function"><span class="keyword">function</span>(<span class="params">a, nodesF</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> flag = nodesF.children &amp;&amp; nodesF.children.length &gt; <span class="number">0</span> , $ul = $(<span class="string">'&lt;ul class="'</span> + (nodesF.spread ? <span class="string">"layui-show"</span> : <span class="string">""</span>) + <span class="string">'"&gt;&lt;/ul&gt;'</span>) , $li = $(\[<span class="string">"&lt;li "</span> + (nodesF.spread ? <span class="string">'data-spread="'</span> + nodesF.spread + <span class="string">'"'</span> : <span class="string">""</span>) + <span class="string">" "</span> + (nodesF.type ? <span class="string">'data-type="'</span> + nodesF.type + <span class="string">'"'</span> : <span class="string">""</span>) + <span class="string">"&gt;"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> flag ? <span class="string">'&lt;i class="layui-icon layui-tree-spread"&gt;'</span> + (nodesF.spread ? icon.arrow\[<span class="number">1</span>\] : icon.arrow\[<span class="number">0</span>\]) + <span class="string">"&lt;/i&gt;"</span> : <span class="string">""</span> &#125;(), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> options.check ? <span class="string">'&lt;i class="layui-icon layui-tree-check"&gt;'</span> + (<span class="string">"checkbox"</span> === options.check ? icon.checkbox\[<span class="number">0</span>\] : <span class="string">"radio"</span> === r.check ? t.radio\[<span class="number">0</span>\] : <span class="string">""</span>) + <span class="string">"&lt;/i&gt;"</span> : <span class="string">""</span> &#125;(), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'&lt;a href="'</span> + (nodesF.href || <span class="string">"javascript:;"</span>) + <span class="string">'" '</span> + (options.target &amp;&amp; nodesF.href ? <span class="string">'target="'</span> + options.target + <span class="string">'"'</span> : <span class="string">""</span>) + <span class="string">"&gt;"</span> + (<span class="string">'&lt;i class="layui-icon layui-tree-'</span> + (flag ? <span class="string">"branch"</span> : <span class="string">"leaf"</span>) + <span class="string">'"&gt;'</span> + (flag ? nodesF.spread ? icon.branch\[<span class="number">1</span>\] : icon.branch\[<span class="number">0</span>\] : icon.leaf) + <span class="string">"&lt;/i&gt;"</span>) + (<span class="string">"&lt;cite&gt;"</span> + (nodesF.name || <span class="string">"未命名"</span>) + <span class="string">"&lt;/cite&gt;&lt;/a&gt;"</span>) &#125;(), <span class="string">"&lt;/li&gt;"</span>\].join(<span class="string">""</span>)); flag &amp;&amp; ($li.append($ul), self.tree($ul, nodesF.children)), $elem.append($li), <span class="string">"function"</span> == <span class="keyword">typeof</span> options.click &amp;&amp; self.click($li, nodesF), self.spread($li, nodesF) ,options.drag &amp;&amp; self.drag($li, nodesF) </span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>满满的二元运算符，三元运算符有没有！！！</p><blockquote><p><strong>科普：</strong></p></blockquote><p>&amp;&amp;和||返回的是两个操作数的的其中一个 &amp;&amp;，左操作数为真值时，返回右操作数，否则返回左操作数； ||,左操作数为真值时，返回左操作数，否则返回右操作数； &amp;&amp;和||还有短路原理，从左至右判断 。如果左边为假值时，不执行后面的表达式。 0、””、null、false、undefined、NaN、-0 在逻辑运算中为假值。</p><blockquote><p><strong>部分实例：</strong></p></blockquote><p>如此精简的语句，完全可以优化老旧的if语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(&quot;function&quot; &#x3D;&#x3D; typeof a) &#123;a()&#125; elseif(&quot;function&quot; &#x3D;&#x3D; typeof b) &#123;b()&#125; else &#123;c()&#125; &#x3D;&gt; &quot;function&quot; &#x3D;&#x3D; typeof a ? a() : &quot;function&quot; &#x3D;&#x3D; typeof b ?b() : c() if(&quot;function&quot; &#x3D;&#x3D; typeof a) a() &#x3D;&gt; &quot;function&quot; &#x3D;&#x3D; typeof a &amp;&amp; a() if(&quot;function&quot; !&#x3D; typeof b) a() &#x3D;&gt; &quot;function&quot; &#x3D;&#x3D; typeof b || a() if(flag1)&#123;if(flag2)&#123;a() &#125;else&#123;b() &#125; &#125;else&#123;c() &#125; &#x3D;&gt; &#39;flag1 ? flag2 ? a() :b(): c()&#39; if(!a) &#123;var a &#x3D; &#123;&#125;&#125; &#x3D;&gt; var a &#x3D;a ||&#123;&#125; \[&#x2F;code\] 还有一种if语句优化方式比较奇怪的 \[code lang&#x3D;&quot;js&quot;\] var b &#x3D; 1 var a &#x3D;&#123;&#39;0&#39;: function() &#123;return &#39;true&#39;&#125;(),&#39;1&#39;:true,&#39;a&#39;:&#39;baa&#39;&#125;\[b\] || 0; console.log(a)</span><br></pre></td></tr></table></figure><blockquote><p><strong>总结：</strong></p></blockquote><p>善用二元运算符,三元运算符和’function(){}()’立即执行函数，可以极大而高效的简便代码，减少代码量，同时伴随着代码可读性的降低，所以千万别忘了加上备注以便于后期维护。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIS行业公司运营的个人想法</title>
      <link href="2018/01/17/%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
      <url>2018/01/17/%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>前几年刚入职不久就相继有几个好朋友兼同事离职，心里有点难过，在这个行业也待了几年了，对遇到一些问题进行记录和自己觉得比较重要对成因进行分析和一些自己的看法。</p><h3 id="记录问题"><a href="#记录问题" class="headerlink" title="记录问题"></a>记录问题</h3><p>先说说地信行业的通病，要成果，薪资低，无规划，技术相对落后，低补贴，加班多出差多。结合同事口述，讲下个别公司。H公司，加班是常态，但正常调休这个东西，领导很少会同意的。所以四舍五入基本等于白加。官僚思想很重，即使某个项目不赚钱，但领导一拍桌子就会决定接了，亏空严重就说是长远战略思考，不会考虑目前人力资源是否足够，部门是否一直处于紧绷状态。让一个主力研发带实习生过去就行了，加班个半年就锻炼出来了，导致项目超级多，体系混乱，人员离职率也很高，项目的管理也不算混乱，总体盈利不多。也没有核心能打的领域。 I公司，上市企业，部分领域也是行业领头，整体感觉是布局太分散了，感觉是一个老人在打太极，但是各个点没有凝成一股绳在某个行业制霸，研发管理和流程都走的很好，内部两个派系表面也没有什么争端，实际上也没有合作，没有资源共享，管理风格也是趋向平稳推进，没有激进派，研发实力据说投入很多，但是公司大多都是以销售渠道为主，研发为辅。基于这种不太重视的氛围下，研发质量比较低，基础运营成本类似出差，商务的成本在公司盈利中占比非常高，企业文化有感受是存在但是不明显，没有调动起员工的积极性。还有以下也是技术研发中的一些共病：</p><ul><li>没有指标性大牛，各执一词，问题反复讨论，例如引入一个新的技术框架，切换整个设计思维。</li><li>不能量化工作量或者是无效的KPI考核指标。</li><li>崇尚过度加班文化。</li><li>忽略知识积累和高技术人才，智力资产的重视，无核心竞争力。</li><li>频繁出现的项目问题未经过排查确定成因，无品控。</li><li>不关心技术人员的职业发展路线</li></ul><h3 id="现象表征"><a href="#现象表征" class="headerlink" title="现象表征"></a>现象表征</h3><p><strong>员工离职现象</strong></p><p>员工离职的成本看似廉价，其实，重新招募，甄选，培训和熟悉所花的时间成本和费用，也包括老员工离职导致的职位空缺造成的效率下降、机会流失和团队重新磨合等隐形成本。员工离职后的评价比较能客观的体现组织形象，员工离职原因多种，无法否认，员工因个人追求或是刚性需求离职不在少数，每个人都有心血来潮想看看外面的世界的权利。健康组织给员工的归属感不仅让在职的每个员工身心受益的过程中给组织创造价值，也在离职的抉择过程中必定是不舍与感激和更多的考量。倘若走的理所当然，组织的凝聚力可见一斑。员工在组织内的工作体验也尤其重要，管理的首要目标是提高劳动生产力，但是不探索生产效率在在哪里受到阻遏而强制要求加班对员工的离职意愿有明显的负面影响。例如某员工修复模块未被发现的隐患，但由于问题并没有出现，所以所做的一切在其他同事和领导面前感觉效率低下。还不如那些天天在办公室处理自己前期作业隐患爆发问题解决到很晚的同事的晒的加班照片。各种组织问题的爆发，是员工对企业认同度和忠诚度的极大挑战。</p><p>其实许多员工也一直在焦虑，每个人引以为傲的因子和掌握的技术能力都有不同。快速学习能力，恶劣环境适应能力，在刚出社会那几年中，这两种能力对职场初期的帮助比较巨大。等到中期的时候就考验自己的综合素质了，自我认知能力，职业规划能力和自制力。到这时候，职业路径大体都已经定了下来，虽然说选择依旧非常多，但是提供抉择的机会和成本已经开始，职业技能开始同质化，与企业光联在了一起，如果说企业中脱离了核心竞争力的话那就是一颗普通的锤子，那员工按照这条路这个锤子打出来的也是锋利而普通的钉子。所以一旦员工意识到这一点，就必然不会选择这条路，或仅仅是把这个公司当做是一个跳板。</p><p> <strong>组织僵化现象</strong></p><p> 老生常谈，源于中国传统文化，中国两千多年的政治体系和社会管理制度的最核心传统，就是官僚制度。组织发展到一定规模的时候（举个栗子&gt;=50人），就应该考虑官僚主义和组织僵化的问题了。假设某管理发现了团队结构问题想要改革，但权限分明无法执行，沟通无果，执行无力。或是一个技术经理，如果他花在ppt，开会及团队琐事的时间和精力占据了大部分时间，还要揣摩领导们的心思，负责调整上下级的人员分配。而不是解决一线问题，配合企业战略，搭建开发框架和规范，推动流程优化。那么这都是组织僵化侧面而有效的印证。 先前试读《无边界管理》中有讲到一些关于管理结构轻便化，权利下放的内容，核心我认为是企业发展所需的职业人员架构分配。去冗余，准确的kpi考核对团队成员更有效的激励。权力下放不是中间管理层的无作为，减负重，而是使计划、生产、审核，反馈等各部门真正连为一体，形成统一的系统，和信息的集中管理。管理结构轻便化则强调扁平化管理，信息和资源能够按照更合理的规则流通。组织在长期的安逸环境下，所形成的组织惰性，对未来的应对能力更加迟钝，固定的利益分配格局，就如同温水煮青蛙，严重制约了组织变革，难以适应未来环境迅速变化的要求。组织成员的凝聚力也相印的逐步消退。</p><h3 id="解决之道"><a href="#解决之道" class="headerlink" title="解决之道"></a>解决之道</h3><p> <strong>企业文化现象</strong> </p><p>而企业的格局——企业文化恰恰能巧妙的化解各种组织问题，企业的本质是组织团队的健康发展，我将它比喻成一艘帆船，员工组成船体的各个部件，CEO指导方向，CTO操盘做详细指令等。企业领导者小至团队负责人，大到企业运营总监，都在朝着指定的方向前行。而企业文化则是一种信念，支撑起希望的船帆，逆流而上，顺风前行。起到的作用不仅仅是精神支撑，也代表了一种风格，创业初期是愿景，是锋芒毕露，是狼性。在快速实现创收后的中期，宣讲的是稳定，是发展，反省。而后期的，通过了解AT的管理的模式，我觉得应该是螺丝钉精神，一个萝卜一个坑，各司其职，有条不紊，个人的能力降到最低，讲究的是团队的执行力和管理者的领导力。说起来乡村教师代言人马云和首富王健林都推崇西点军校式军事化管理，_Duty，Honor，Country_。也有种说法，西点军校培养的CEO比任何的商学院都多。</p><p> <strong>领导力</strong> </p><p>主要强调三点。</p><ul><li>正直</li><li>思路清晰,有效沟通</li><li>权衡与抉择</li></ul><p>每个人在做事方法，风格，性格上都形形色色，但有效的领导力也不外乎这三种重要基础，这三种做的好才能收获周围人的信赖,正直意味者担当，职责。而有效沟通则是团队执行力的体现。重点是第三点，管理人员往往需要做出艰难的抉择：辞退伙伴、为失误承担责任、不能满足所有人的所有要求而让一些人失望。该采取一系列什么样的行动、该选择何种风格的沟通，才会使伙伴们对他的信任更加坚定是对每位管理的领导力的挑战。而信任，就是组织凝聚力的核心，当然，这些挑战便是每次信任积累的每一个机会。组织凝聚力的与信任。 引用知友赵望野<a href="https://zhuanlan.zhihu.com/p/30384829" target="_blank" rel="noopener">最重要的事，没有之一</a>中的一段：</p><blockquote><p>沟通，是构建成功领导力的基石。关于沟通的技巧和艺术有很多经典著作，培训课程也多不胜数。对于团队管理者来说，以下几点格外重要：从心出发。作为团队管理者，沟通背后的起心动念是什么？是为了通过交流真正了解员工，帮助其成长，还是只是发布指令和监督工作进展？是为了整个团队目标的达成，还是仅仅为了自己的权威？你的沟通意图影响着你的沟通方式和团队成员的感受，最终影响着沟通的效果。贵在平时，贵在坚持。冰冻三尺，非一日之寒。员工的工作表现好，应该及时鼓励，让员工感受到被认可；工作中的困难和问题，更需要在平时的沟通中及时发现和解决，不至于积累成严重的问题。作为管理者应该将与团队成员的沟通安排在自己的日程中，确保跟每个成员都有充分的沟通。不要让团队揣测你的信息。当信息不够明确的时候，人们就会按照自己的经验揣测，结果很可能导致误解。尤其在工作场合的沟通中，传递的信息应该明确，并确认对方的理解和你要表达的是否一致。</p></blockquote><p>组织在发展过程中必然会造成老员工的积累，相处了十几年的老伙计工作效率慢慢的降低，一方面如何安排老员工在更适宜的岗位，学习新的知识，跟上时代，另一方面让更新鲜的血液和思维融入到产品中，使得公司总体应对能力得到提升，也是公司运营发展所需要关心的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FormData上传图片通用办法</title>
      <link href="2017/09/26/FormData%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E9%80%9A%E7%94%A8%E5%8A%9E%E6%B3%95/"/>
      <url>2017/09/26/FormData%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E9%80%9A%E7%94%A8%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>关于FormData 对象的使用。 FormData 对象，使用浏览器原生特性实现文件上传，可以把form中所有表单元素的name与value组成一个queryString，提交到后台。在使用Ajax提交时，使用FormData对象可以减少拼接queryString的工作量。 通过FormData传输的数据格式和表单通过submit() 方法传输的数据格式相同 重要属性：</p><blockquote><p>enctype=”multipart/form-data”</p></blockquote><p>默认样式看完就知道自定义样式的重要性了，常用解决办法：</p><blockquote><p>   上传文件</p></blockquote><p>美化样式：clip:rect(0 0 0 0);实现隐藏lable标签。btn-primary参照bootstrap样式. 另一种美化方式可参考<a href="http://www.haorooms.com/post/css_input_uploadmh" target="_blank" rel="noopener">http://www.haorooms.com/post/css_input_uploadmh</a>. <strong>一：使用FormData结合表单一并提交</strong> 1.创建一个FormData空对象，然后使用append方法添加key/value。</p><blockquote><p>name:<br>gender:  male female<br>photo:</p></blockquote><p>name值为与后台交互文件参数值需要保持一致;或可以不使用name值，在下面的方法中单独是用formData.append方法。 上传方式：</p><blockquote><p>function fsubmit(){<br>  var formElement = document.querySelector(“form1”);<br>  var outOfFormValue= document.querySelector(“outOfForm”).value ;<br>  var formData = new FormData(formElement);<br>  var request = new XMLHttpRequest();<br>  request.open(“POST”, “submit.php”);<br>  formData.append(“outOfFormValue”, outOfFormValue);<br>  request.send(formData);<br>}</p></blockquote><p>outOfFormValue：这样你就可以在发送请求之前自由地附加不一定是用户编辑的字段到表单数据里。 <strong>二：使用ajax异步上传返回服务器图片地址赋值表单一并提交</strong> 使用场景主要是现在许多第三方云服务商提供的对象存储，时序化数据库，包括阿里，腾讯，七牛云等等，针对企业客户场景进行灵活地部署和运维。 原理其实是一样的，只是处理的流程不一样；</p><blockquote></blockquote><p>通过隐藏的iframe来隐藏form表单提交的页面刷新的小bug。 点击提交,因为target=iframe，监听iframe的load事件，能获取到上传到了iframe中的返回值，进行进一步处理。</p><blockquote><p>$(‘iframe’).on(‘load’, function() {<br>var responseText = $(‘iframe’)[0].contentDocument.body.textContent;<br>var responseData = JSON.parse(responseText) || {};<br>if (responseData.isSuccess == true || responseData.code == 200) {<br>//success<br>} else {<br>//error<br>}<br>});</p></blockquote><p>再将返回的img的URL值赋值新的form表单中，重新点击提交完成操作。 第一次写，不是很完整，也没有demo，还望海涵。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016年终总结</title>
      <link href="2017/01/17/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>2017/01/17/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>停笔也有一段时间，毕业这一年事情总是最多的，先理一个大概，接触前端也差不多快要两三年了，说起来也并不是偶然，始毕业于计算机系，互联网行业形势看好，再加上一直想拥有一个属于自己的博客来记些随笔。也就跌跌撞撞往前端开发这条路上摸索，由于大学时期路线始终不明确(消息闭塞)，其实毕业前半年我才想明白，对于一个快要毕业的非重点小本而言，我已经失去了搭上互联网一线快车的机会，如何平滑步入社会，一脚不踏空，再逐步地有计划地搭建本身的知识架构体系，才能算是职业生涯好的开端。</p><p>这一脚没走空也没四平八稳，小私企的经历算是社会给我上的第一课。短短八个月，没有前辈领门，领导层利益争锋内耗项目中断，停薪指派外业出差干杂活，公司地址多次搬迁。对于一个意志坚强的工程师和具有优秀党性的共青团员来说，内心都几近崩溃。也终究熬了过来，更何况还有可怜的几位同学难友和同住五年的舍友一起感受这般生命的坚韧，倒也留下了共患难的交情。年后难兄难弟也各奔东西寻了个好去处。而我，又在广州一家初创公司经历两个月的加班洗礼后，生活终究为我开了一朵小花，进了一家环境稳定的新三板公司，稳定驻扎才开始有空闲打理我的博客，打理我自己。 回顾一年，时而大梦初醒，奋发图强，时而麻醉自己，消遣娱乐。相对于刚毕业时不知所措，到茫然失措身心疲惫。日积月累的负面能量开始影响着日常工作和学习，丧…许久许久，老友小聚才能小松一口气，缓一口气继续前行。但比逃避学习更为严重的是，有种思绪迫切让你从生活中做出抉择，职业选错了？学习曲线有问题？学习路线会不会过时？是否陷入低水平的勤奋和毫无意义的学习？自己的核心竞争力究竟在哪里？直指内心，时间拖得越久，状态越差。</p><p>这会不会就是生活的本质？ </p><p>《The Road Not Taken》</p><p> <em>I shall be telling this with a sigh Somewhere ages and ages hence: Two roads diverged in a wood, and I– I took the one less traveled by, And that has made all the difference.</em> </p><p><strong>人的一生面临着无数的选择，而每一次选择都会对人生产生重要影响。</strong>一个人的一生怎样度过，就看他在人生的岔路口做出了怎样的选择，每个选择都是走向不同的平行线。</p><p> 开卷有益，学校里闲着无事攒的一堆心灵毒鸡汤让我在每次的抉择中都走了看起来更难的路，但终究也收获了许多。幸而技术这条路向来走的稳，可以闷着头往前冲，所以我一再地调侃自己，赶上了这波互联网风口的末班车，许多人或许如我这般缺少的只是时间，拥有的也只是时间。 离自己的期望值到底还需要多远？庄子讲了，那些欲望和情感太深的人，他们先天的智慧很浅。 但是那些无时无刻渴想成功的人们呢？</p><p> 圣贤庸行,大人小心！愿诸君在这坎坷而又顺风而又无限多岔口的长路，一路大道，高歌前行！</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日志 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
